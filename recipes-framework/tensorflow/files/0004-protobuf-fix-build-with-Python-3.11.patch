From d799f8ce84b40da1998d2a781b6ae009219e260b Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Mon, 14 Nov 2022 12:51:55 +0800
Subject: [PATCH 4/6] protobuf: fix build with Python 3.11

The PyFrameObject structure members have been removed from the public C API.

Upstream-Status: Backport [https://github.com/protocolbuffers/protobuf/commit/da973aff2adab60a9e516d3202c111dbdde1a50f]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 third_party/protobuf/protobuf.patch | 151 +++++++++++++++++++++++++++-
 1 file changed, 147 insertions(+), 4 deletions(-)

diff --git a/third_party/protobuf/protobuf.patch b/third_party/protobuf/protobuf.patch
index 1aae0459185..3a1ee8926c7 100644
--- a/third_party/protobuf/protobuf.patch
+++ b/third_party/protobuf/protobuf.patch
@@ -1,5 +1,23 @@
+From 0f39eda7ff342246e7968a49f73db9f55dcf6ea1 Mon Sep 17 00:00:00 2001
+From: Hongxu Jia <hongxu.jia@windriver.com>
+Date: Sun, 13 Nov 2022 20:40:56 -0800
+Subject: [PATCH] protobuf patch
+
+Fix build with Python 3.11
+
+The PyFrameObject structure members have been removed from the public C API.
+
+Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
+---
+ BUILD                                         | 21 ++++--
+ protobuf.bzl                                  | 51 ++++++-------
+ python/google/protobuf/pyext/descriptor.cc    | 75 +++++++++++++++----
+ python/google/protobuf/pyext/message.cc       |  6 +-
+ .../google/protobuf/pyext/unknown_fields.cc   |  2 +-
+ 5 files changed, 107 insertions(+), 48 deletions(-)
+
 diff --git a/BUILD b/BUILD
-index dbae719ff..4e276c854 100644
+index dbae719..4e276c8 100644
 --- a/BUILD
 +++ b/BUILD
 @@ -23,7 +23,7 @@ config_setting(
@@ -70,7 +88,7 @@ index dbae719ff..4e276c854 100644
  
  proto_lang_toolchain(
 diff --git a/protobuf.bzl b/protobuf.bzl
-index e0653321f..4156a1275 100644
+index e065332..4156a12 100644
 --- a/protobuf.bzl
 +++ b/protobuf.bzl
 @@ -1,4 +1,5 @@
@@ -168,8 +186,130 @@ index e0653321f..4156a1275 100644
      grpc_cpp_plugin = None
      if use_grpc_plugin:
          grpc_cpp_plugin = "//external:grpc_cpp_plugin"
+diff --git a/python/google/protobuf/pyext/descriptor.cc b/python/google/protobuf/pyext/descriptor.cc
+index 1637f83..703304e 100644
+--- a/python/google/protobuf/pyext/descriptor.cc
++++ b/python/google/protobuf/pyext/descriptor.cc
+@@ -63,6 +63,37 @@
+                        : PyBytes_AsStringAndSize(ob, (charpp), (sizep)))
+ #endif
+ 
++#if PY_VERSION_HEX < 0x030900B1 && !defined(PYPY_VERSION)
++static PyCodeObject* PyFrame_GetCode(PyFrameObject *frame)
++{
++    Py_INCREF(frame->f_code);
++    return frame->f_code;
++}
++
++static PyFrameObject* PyFrame_GetBack(PyFrameObject *frame)
++{
++    Py_XINCREF(frame->f_back);
++    return frame->f_back;
++}
++#endif
++
++#if PY_VERSION_HEX < 0x030B00A7 && !defined(PYPY_VERSION)
++static PyObject* PyFrame_GetLocals(PyFrameObject *frame)
++{
++    if (PyFrame_FastToLocalsWithError(frame) < 0) {
++        return NULL;
++    }
++    Py_INCREF(frame->f_locals);
++    return frame->f_locals;
++}
++
++static PyObject* PyFrame_GetGlobals(PyFrameObject *frame)
++{
++    Py_INCREF(frame->f_globals);
++    return frame->f_globals;
++}
++#endif
++
+ namespace google {
+ namespace protobuf {
+ namespace python {
+@@ -101,48 +132,66 @@ bool _CalledFromGeneratedFile(int stacklevel) {
+   // This check is not critical and is somewhat difficult to implement correctly
+   // in PyPy.
+   PyFrameObject* frame = PyEval_GetFrame();
++  PyCodeObject* frame_code = nullptr;
++  PyObject* frame_globals = nullptr;
++  PyObject* frame_locals = nullptr;
++  bool result = false;
++
+   if (frame == NULL) {
+-    return false;
++    goto exit;
+   }
++  Py_INCREF(frame);
+   while (stacklevel-- > 0) {
+-    frame = frame->f_back;
++    PyFrameObject* next_frame = PyFrame_GetBack(frame);
++    Py_DECREF(frame);
++    frame = next_frame;
+     if (frame == NULL) {
+-      return false;
++      goto exit;
+     }
+   }
+ 
+-  if (frame->f_code->co_filename == NULL) {
+-    return false;
++  frame_code = PyFrame_GetCode(frame);
++  if (frame_code->co_filename == nullptr) {
++    goto exit;
+   }
+   char* filename;
+   Py_ssize_t filename_size;
+-  if (PyString_AsStringAndSize(frame->f_code->co_filename,
++  if (PyString_AsStringAndSize(frame_code->co_filename,
+                                &filename, &filename_size) < 0) {
+     // filename is not a string.
+     PyErr_Clear();
+-    return false;
++    goto exit;
+   }
+   if ((filename_size < 3) ||
+       (strcmp(&filename[filename_size - 3], ".py") != 0)) {
+     // Cython's stack does not have .py file name and is not at global module
+     // scope.
+-    return true;
++    result = true;
++    goto exit;
+   }
+   if (filename_size < 7) {
+     // filename is too short.
+-    return false;
++    goto exit;
+   }
+   if (strcmp(&filename[filename_size - 7], "_pb2.py") != 0) {
+     // Filename is not ending with _pb2.
+-    return false;
++    goto exit;
+   }
+ 
+-  if (frame->f_globals != frame->f_locals) {
++  frame_globals = PyFrame_GetGlobals(frame);
++  frame_locals = PyFrame_GetLocals(frame);
++  if (frame_globals != frame_locals) {
+     // Not at global module scope
+-    return false;
++    goto exit;
+   }
+ #endif
+-  return true;
++  result = true;
++exit:
++  Py_XDECREF(frame_globals);
++  Py_XDECREF(frame_locals);
++  Py_XDECREF(frame_code);
++  Py_XDECREF(frame);
++  return result;
+ }
+ 
+ // If the calling code is not a _pb2.py file, raise AttributeError.
 diff --git a/python/google/protobuf/pyext/message.cc b/python/google/protobuf/pyext/message.cc
-index 3530a9b37..c31fa8fcc 100644
+index 3530a9b..c31fa8f 100644
 --- a/python/google/protobuf/pyext/message.cc
 +++ b/python/google/protobuf/pyext/message.cc
 @@ -2991,8 +2991,12 @@ bool InitProto2MessageModule(PyObject *m) {
@@ -187,7 +327,7 @@ index 3530a9b37..c31fa8fcc 100644
        return false;
      }
 diff --git a/python/google/protobuf/pyext/unknown_fields.cc b/python/google/protobuf/pyext/unknown_fields.cc
-index c3679c0d3..e80a1d97a 100755
+index c3679c0..e80a1d9 100755
 --- a/python/google/protobuf/pyext/unknown_fields.cc
 +++ b/python/google/protobuf/pyext/unknown_fields.cc
 @@ -221,7 +221,7 @@ const UnknownField* GetUnknownField(PyUnknownFieldRef* self) {
@@ -199,3 +339,6 @@ index c3679c0d3..e80a1d97a 100755
    if (self->index >= total_size) {
      PyErr_Format(PyExc_ValueError,
                   "UnknownField does not exist. "
+-- 
+2.37.1
+
-- 
2.27.0

