From c6c667fc1d2db88a4adda7945c9734bbeb81e708 Mon Sep 17 00:00:00 2001
From: Peter Hawkins <phawkins@google.com>
Date: Mon, 14 Nov 2022 14:20:28 +0800
Subject: [PATCH 6/6] wrapt: support Python 3.11

Backport patches from upstream to support Python 3.11

Upstream-Status: Backport [https://github.com/GrahamDumpleton/wrapt/commit/1c84deb279921d4aa9b2ed0542270d1b7e35fdde]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 tensorflow/workspace2.bzl                     |  1 +
 .../0001-compatibility-with-python-3.11.patch | 73 +++++++++++++++++++
 2 files changed, 74 insertions(+)
 create mode 100644 third_party/0001-compatibility-with-python-3.11.patch

diff --git a/tensorflow/workspace2.bzl b/tensorflow/workspace2.bzl
index 6f456371872..417cb43dc25 100644
--- a/tensorflow/workspace2.bzl
+++ b/tensorflow/workspace2.bzl
@@ -866,6 +866,7 @@ def _tf_repositories():
     tf_http_archive(
         name = "wrapt",
         build_file = "//third_party:wrapt.BUILD",
+        patch_file = ["//third_party:0001-compatibility-with-python-3.11.patch"],
         sha256 = "8a6fb40e8f8b6a66b4ba81a4044c68e6a7b1782f21cfabc06fb765332b4c3e51",
         strip_prefix = "wrapt-1.11.1/src/wrapt",
         system_build_file = "//third_party/systemlibs:wrapt.BUILD",
diff --git a/third_party/0001-compatibility-with-python-3.11.patch b/third_party/0001-compatibility-with-python-3.11.patch
new file mode 100644
index 00000000000..58b49f63b98
--- /dev/null
+++ b/third_party/0001-compatibility-with-python-3.11.patch
@@ -0,0 +1,73 @@
+From a84a3f0dd83500eb108acbf68ddc13e5969781d2 Mon Sep 17 00:00:00 2001
+From: Hongxu Jia <hongxu.jia@windriver.com>
+Date: Sun, 13 Nov 2022 22:16:19 -0800
+Subject: [PATCH] compatibility with python 3.11
+
+Signed-off-by: Cyril Jouve <jv.cyril@gmail.com>
+Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
+---
+ src/wrapt/decorators.py | 46 +++++++++++++++++++++++++++++++++++++++--
+ 1 file changed, 44 insertions(+), 2 deletions(-)
+
+diff --git a/decorators.py b/decorators.py
+index 9b569f8..f82864c 100644
+--- a/decorators.py
++++ b/decorators.py
+@@ -31,10 +31,52 @@ else:
+         exec("""exec _code_ in _globs_, _locs_""")
+ 
+ from functools import partial
+-from inspect import ismethod, isclass, formatargspec
+-from collections import namedtuple
++from inspect import isclass
+ from threading import Lock, RLock
+ 
++try:
++    from inspect import formatargspec
++except ImportError:  #  > py3.10
++    from inspect import formatannotation
++    def formatargspec(args, varargs=None, varkw=None, defaults=None,
++                      kwonlyargs=(), kwonlydefaults={}, annotations={},
++                      formatarg=str,
++                      formatvarargs=lambda name: '*' + name,
++                      formatvarkw=lambda name: '**' + name,
++                      formatvalue=lambda value: '=' + repr(value),
++                      formatreturns=lambda text: ' -> ' + text,
++                      formatannotation=formatannotation):
++
++        def formatargandannotation(arg):
++            result = formatarg(arg)
++            if arg in annotations:
++                result += ': ' + formatannotation(annotations[arg])
++            return result
++        specs = []
++        if defaults:
++            firstdefault = len(args) - len(defaults)
++        for i, arg in enumerate(args):
++            spec = formatargandannotation(arg)
++            if defaults and i >= firstdefault:
++                spec = spec + formatvalue(defaults[i - firstdefault])
++            specs.append(spec)
++        if varargs is not None:
++            specs.append(formatvarargs(formatargandannotation(varargs)))
++        else:
++            if kwonlyargs:
++                specs.append('*')
++        if kwonlyargs:
++            for kwonlyarg in kwonlyargs:
++                spec = formatargandannotation(kwonlyarg)
++                if kwonlydefaults and kwonlyarg in kwonlydefaults:
++                    spec += formatvalue(kwonlydefaults[kwonlyarg])
++                specs.append(spec)
++        if varkw is not None:
++            specs.append(formatvarkw(formatargandannotation(varkw)))
++        result = '(' + ', '.join(specs) + ')'
++        if 'return' in annotations:
++            result += formatreturns(formatannotation(annotations['return']))
++        return result
+ try:
+     from inspect import signature
+ except ImportError:
+-- 
+2.37.1
+
-- 
2.27.0

